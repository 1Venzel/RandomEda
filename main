import asyncio
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –°–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
dishes_by_category = {
    "main": {
        "name": "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞",
        "dishes": ["–ü–∏—Ü—Ü–∞", "–ü–∞—Å—Ç–∞", "–°—Ç–µ–π–∫", "–õ–∞–∑–∞–Ω—å—è", "–ü–µ–ª—å–º–µ–Ω–∏", "–†–∞–º–µ–Ω", "–ü–ª–æ–≤", "–®–∞—à–ª—ã–∫"]
    },
    "snacks": {
        "name": "–ó–∞–∫—É—Å–∫–∏",
        "dishes": ["–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", "–§–∞–ª–∞—Ñ–µ–ª—å", "–•—É–º—É—Å", "–•–æ—Ç-–¥–æ–≥", "–ë—É—Ä—Ä–∏—Ç–æ"]
    },
    "fastfood": {
        "name": "–§–∞—Å—Ç—Ñ—É–¥",
        "dishes": ["–ë—É—Ä–≥–µ—Ä", "–ì–∞–º–±—É—Ä–≥–µ—Ä", "–ß–∏–∑–±—É—Ä–≥–µ—Ä", "–•–æ—Ç-–¥–æ–≥", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏"]
    },
    "soups": {
        "name": "–°—É–ø—ã",
        "dishes": ["–ö—É—Ä–∏–Ω—ã–π —Å—É–ø", "–ë–æ—Ä—â", "–°–æ–ª—è–Ω–∫–∞", "–¢–æ–º-—è–º", "–§–æ-–±–æ"]
    },
    "desserts": {
        "name": "–î–µ—Å–µ—Ä—Ç—ã",
        "dishes": ["–¢–∏—Ä–∞–º–∏—Å—É", "–ß–∏–∑–∫–µ–π–∫", "–ü–∞–Ω–∫–µ–π–∫–∏", "–í–∞—Ñ–ª–∏", "–ë–ª–∏–Ω—ã", "–°—ã—Ä–Ω–∏–∫–∏"]
    }
}

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
subscribed_users = set()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/food - —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/category - –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –Ω–µ—ë\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    )

# –ö–æ–º–∞–Ω–¥–∞ /food
async def food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category_key = random.choice(list(dishes_by_category.keys()))
    category = dishes_by_category[category_key]
    dish = random.choice(category["dishes"])

    message = (
        f"<b>–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>\n"
        f"üçΩ <b>{dish}</b>\n"
        f"üìÇ <i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</i> {category['name']}\n"
        f"üòã –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"
    )

    await update.message.reply_text(message, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    subscribed_users.add(user_id)
    await update.message.reply_text("–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É! üòä")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in subscribed_users:
        subscribed_users.remove(user_id)
        await update.message.reply_text("–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. üò¢")
    else:
        await update.message.reply_text("–¢—ã –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_daily_message(context: CallbackContext):
    for user_id in subscribed_users:
        try:
            category_key = random.choice(list(dishes_by_category.keys()))
            category = dishes_by_category[category_key]
            dish = random.choice(category["dishes"])

            message = (
                f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                f"üçΩ <b>{dish}</b>\n"
                f"üìÇ <i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</i> {category['name']}\n"
                f"üòã –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"
            )

            await context.bot.send_message(chat_id=user_id, text=message, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = ApplicationBuilder().token("7844042379:AAH640z5wUHaYj68CRrqsoSan-Nt6Hc5974").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("food", food))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    loop = asyncio.get_event_loop()
    scheduler = AsyncIOScheduler(event_loop=loop)

    scheduler.add_job(
        send_daily_message,
        trigger=CronTrigger(hour=7, minute=27),
        args=[application.bot],
    )
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
